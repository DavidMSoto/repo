source('~/kaggle/repo/root/redhat/Combo_of_raddar_leak.R')
install.packages("FeatureHashing")
source('~/kaggle/repo/root/redhat/Combo_of_raddar_leak.R')
source('~/kaggle/repo/root/redhat/Combo_of_raddar_leak.R')
source('~/kaggle/repo/root/redhat/Combo_of_raddar_leak.R')
source('~/kaggle/repo/root/redhat/Combo_of_raddar_leak.R')
summary(people)
cat("Doing raddar's stuff\n")
library(data.table)
library(FeatureHashing)
library(xgboost)
library(dplyr)
library(Matrix)
setwd("/Users/davidmonteagudo/kaggle/data/redhat/input/")
cat(Sys.time())
cat("Reading data\n")
train=fread('../input/act_train.csv', verbose = FALSE, showProgress = FALSE) %>% as.data.frame() # SILENCE
test=fread('../input/act_test.csv', verbose = FALSE, showProgress = FALSE) %>% as.data.frame() # SILENCE
#people data frame
people=fread('../input/people.csv', verbose = FALSE, showProgress = FALSE) %>% as.data.frame() # SILENCE
cat(Sys.time())
cat("Processing data\n")
summary(people)
people$char_1<-NULL #unnecessary duplicate to char_2
names(people)[2:length(names(people))]=paste0('people_',names(people)[2:length(names(people))])
summary(people)
p_logi <- names(people)[which(sapply(people, is.logical))]
for (col in p_logi) set(people, j = col, value = as.numeric(people[[col]]))
summary(p_logi)
describe(p_logi)
head(p_logi, n=10L)
head(p_logi)
tail(p_logi)
summary(people)
unique(people$people_group_1)
people$people_group_1[people$people_group_1 %in% names(which(table(people$people_group_1)==1))]='group unique'
unique(people$people_group_1)
length(unique(people$people_group_1))
rm(list = ls())
library(data.table)
library(FeatureHashing)
library(xgboost)
library(dplyr)
library(Matrix)
setwd("/Users/davidmonteagudo/kaggle/data/redhat/input/")
cat(Sys.time())
cat("Reading data\n")
train=fread('../input/act_train.csv', verbose = FALSE, showProgress = FALSE) %>% as.data.frame() # SILENCE
test=fread('../input/act_test.csv', verbose = FALSE, showProgress = FALSE) %>% as.data.frame() # SILENCE
#people data frame
people=fread('../input/people.csv', verbose = FALSE, showProgress = FALSE) %>% as.data.frame() # SILENCE
cat(Sys.time())
cat("Processing data\n")
people$char_1<-NULL #unnecessary duplicate to char_2
names(people)[2:length(names(people))]=paste0('people_',names(people)[2:length(names(people))])
#convertimos las variables que son logicas como numericas
p_logi <- names(people)[which(sapply(people, is.logical))]
for (col in p_logi) set(people, j = col, value = as.numeric(people[[col]]))
length(unique(people$people_group_1))
people$people_group_1[people$people_group_1 %in% names(which(table(people$people_group_1)==1))]='group unique'
length(unique(people$people_group_1))
d1 <- merge(train, people, by = "people_id", all.x = T)
d2 <- merge(test, people, by = "people_id", all.x = T)
Y <- d1$outcome
d1$outcome <- NULL
