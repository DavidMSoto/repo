rm (list = ls())
library(ggplot2)
library(VIM)
library(mice)
library(vcd)
require(car)
library(tabplot)
library(PerformanceAnalytics)
library(MASS)
library(glmnet)
# ===============================================================================================
setwd("/Users/davidmonteagudo/kaggle/data/imdb/input/")
movies = read.csv("movie_metadata.csv")
# ===============================================================================================
# EDA
summary(movies)
sapply(movies, sd)
summary(movies)
hist(movies$num_critic_for_reviews)
aggr(movies, numbers=T, prop=F, sortVars=T, labels=names(movies))
rm(list = ls())
library(data.table)
library(digest)
library(FeatureHashing)
library(Matrix)
n_batch  <- 5
col_idx  <- c(1:2141)
col_bat  <- cut(col_idx, n_batch, labels = c(1:n_batch))
all_features <- vector("list", n_batch)
all_digests  <- vector("list", n_batch)
read <- function(select) fread("../input/train_categorical.csv",
colClasses = "character",
na.strings = "",
showProgress = F,
select = select)
for(i in seq_along(all_features)) {
print(i)
dt <- read(select = col_idx[col_bat == i])
all_features[[i]] <- names(dt)
all_digests[[i]]  <- lapply(dt, digest)
rm(dt)
}
for(i in seq_along(all_features)) {
print(i)
dt <- read(select = col_idx[col_bat == i])
all_features[[i]] <- names(dt)
all_digests[[i]]  <- lapply(dt, digest)
rm(dt)
}
setwd("/Users/davidmonteagudo/kaggle/data/bosch/input/")
n_batch  <- 5
col_idx  <- c(1:2141)
col_bat  <- cut(col_idx, n_batch, labels = c(1:n_batch))
all_features <- vector("list", n_batch)
all_digests  <- vector("list", n_batch)
read <- function(select) fread("../input/train_categorical.csv",
colClasses = "character",
na.strings = "",
showProgress = F,
select = select)
for(i in seq_along(all_features)) {
print(i)
dt <- read(select = col_idx[col_bat == i])
all_features[[i]] <- names(dt)
all_digests[[i]]  <- lapply(dt, digest)
rm(dt)
}
library(bigmemory)
feature_summary <- data.table(feature = unlist(all_features),
digest  = unlist(all_digests))
feature_summary$duplicate <- duplicated(feature_summary$digest)
sum(feature_summary$duplicate)
head(feature_summary, 30)
feature_summary <- data.table(feature = unlist(all_features),
digest  = unlist(all_digests))
feature_summary$duplicate <- duplicated(feature_summary$digest)
sum(feature_summary$duplicate)
head(feature_summary, 30)
not_dupes <- feature_summary$feature[!feature_summary$duplicate]
dt <- read(select = not_dupes)
X  <- hashed.model.matrix( ~ . -Id -1, data = dt)
dim(X)
sum(rowSums(X) != 0)
sum(colSums(X) != 0)
summary(colSums(X)[colSums(X) > 0])
library(ff)
setwd("/Users/davidmonteagudo/kaggle/data/bosch/input/")
source('~/.active-rstudio-document')
cat.ff <- read.csv.ffdf(file="../input/train_categorical.csv")
rm(list = ls())
setwd("~/dataScience/projects/repo/crime/code/")
c=fread('"../input/2016-07/2016-07-bedfordshire-street.csv"') %>% as.data.frame()
library(data.table)
library(FeatureHashing)
library(xgboost)
library(dplyr)
library(Matrix)
c=fread('"../input/2016-07/2016-07-bedfordshire-street.csv"') %>% as.data.frame()
setwd("~/dataScience/projects/repo/crime/code/")
c=fread('"../input/2016-07/2016-07-bedfordshire-street.csv"') %>% as.data.frame()
system('ls -lh ./../input/2016-07/' )
c=fread('../input/2016-07/2016-07-bedfordshire-street.csv') %>% as.data.frame()
p_logi <- names(c)[which(sapply(c, is.logical))]
for (col in p_logi) set(c, j = col, value = as.numeric(c[[col]]))
View(c)
for (col in p_logi) set(c, j = col, value = as.numeric(c[[col]]))
showmap(c)
showmap = function(dataset) {
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=dataset$Longitude, lat=dataset$Latitude,
popup=dataset$Crime.type,
clusterOptions = markerClusterOptions())
m  # Print the map
}
showmap(c)
e=fread('../input/everything.csv', header=T, sep=",", stringsAsFactors=F)
e$Context<-NULL #unnecessary duplicate to char_2
showmap(e)
p_logi <- names(e)[which(sapply(e, is.logical))]
for (col in p_logi) set(e, j = col, value = as.numeric(e[[col]]))
showmap(e)
metropolitan = read.csv("../input/2016-07/2016-07-metropolitan-street.csv", header=T, sep=",", stringsAsFactors=F)
showmap(metropolitan)
bedfordshire = read.csv("../input/2016-07/2016-07-bedfordshire-street.csv", header=T, sep=",", stringsAsFactors=F)
ggplot(data=(crimes %>% filter(year==2015)), aes(x = Crimetype)) +
geom_bar(aes(fill = Crimetype)) +
ggtitle("The histogram of offense insidents by borough") +
xlab("Crimetype") +
ylab("Number of Crimes") +
theme(legend.position = "bottom") +
scale_x_discrete(labels=c("Bu", "FA", "GL", "GM", "RP", "RO", "M")) +
facet_wrap(~Borough, nrow=1)
rm(list = ls())
showgrap = function(temp) {
temp <- movie %>% select(movie_title,title_year)
temp <- temp %>% group_by(title_year) %>% summarise(n=n())
temp <- na.omit(temp)
p <- plot_ly(temp, x = title_year, y = n, name = "Number of Movies by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(title_year))), x = title_year) %>%
layout(title = "Year and Crimes",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = title_year, y = n, text = "Peak", showarrow = T))
}
showmap = function(dataset) {
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=dataset$Longitude, lat=dataset$Latitude,
popup=dataset$Crime.type,
clusterOptions = markerClusterOptions())
m  # Print the map
}
WIN <- FALSE
if (WIN) {setwd("~//R//Rossmann")} else{setwd("~/dataScience/projects/repo/crime/code/")}
e=fread('../input/everything.csv', header=T, sep=",", stringsAsFactors=F)
e$Context<-NULL #unnecessary duplicate to char_2
showmap(e)
p_logi <- names(e)[which(sapply(e, is.logical))]
for (col in p_logi) set(e, j = col, value = as.numeric(e[[col]]))
showmap(e)
path <-'../input/2016-07/2016-07-metropolitan-street.csv'
e=fread(path, header=T, sep=",", stringsAsFactors=F)
e$Context<-NULL #unnecessary duplicate to char_2
showmap(e)
row.has.na <- apply(e, 1, function(x){any(is.na(x))})
sum(row.has.na)
hasempty<-metropolitan[row.has.na,]
e <- e[!row.has.na,]
showgrap(e)
rm(list = ls())
rm(list = ls())
library(data.table)
library(dplyr)
library(Matrix)
system('ls -lh ./../input/2016-07/' )
WIN <- FALSE
if (WIN) {setwd("~//R//Rossmann")} else{setwd("~/dataScience/projects/repo/crime/code/")}
#path <-'../input/2016-07/2016-07-metropolitan-street.csv'
#path <-'../input/2016-07/2016-07-bedfordshire-street.csv'
#path <-'../input/everything.csv'
path <- '../input/metropolitan_2010_2016.csv'
cat(Sys.time())
cat("Reading data\n")
e=fread(path, header=T, sep=",", stringsAsFactors=F)
cat(Sys.time())
cat("Processing data\n")
e$Context<-NULL #unnecessary duplicate to char_2
row.has.na <- apply(e, 1, function(x){any(is.na(x))})
sum(row.has.na)
crimes <- subset(e, Crime.type =='Violence and sexual offences',
select=c(Month, Longitude,Latitude,LSOA.code,LSOA.name,Crime.type))
names(e)
crimes <- subset(e, Crime type =='Violence and sexual offences',
select=c(Month, Longitude,Latitude,LSOA.code,LSOA.name,Crime.type))
names(e) <- c( "CrimeID"  , "Month"  ,  "Reportedby"    ,  "Fallswithin" ,
"Longitude"   ,   "Latitude"     ,      "Location"    ,    "LSOAcode"     ,
"LSOAname"     ,        "Crimetype"   ,         "Lastoutcomecategory")
names(e)
crimes <- subset(e, Crimetype =='Violence and sexual offences',
select=c(Month, Longitude,Latitude,LSOAcode,LSOAname,Crimetype))
showmap(crimes)
showgrap = function(temp) {
temp <- movie %>% select(movie_title,title_year)
temp <- temp %>% group_by(title_year) %>% summarise(n=n())
temp <- na.omit(temp)
p <- plot_ly(temp, x = title_year, y = n, name = "Number of Movies by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(title_year))), x = title_year) %>%
layout(title = "Year and Crimes",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = title_year, y = n, text = "Peak", showarrow = T))
}
showmap = function(dataset) {
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=dataset$Longitude, lat=dataset$Latitude,
popup=dataset$Crime.type,
clusterOptions = markerClusterOptions())
m  # Print the map
}
showmap(crimes)
row.has.na <- apply(crimes, 1, function(x){any(is.na(x))})
sum(row.has.na)
vars <- c("year", "month")
crimes <- separate(crimes, Month, into = vars, sep = "-")
library(data.table)
library(dplyr)
library(Matrix)
vars <- c("year", "month")
crimes <- separate(crimes, Month, into = vars, sep = "-")
library(data.table)
library(dplyr)
library(Matrix)
library(tidyr)
vars <- c("year", "month")
crimes <- separate(crimes, Month, into = vars, sep = "-")
by_year_and_crime = crimes %>%
group_by(year, Crimetype) %>% summarise(count=n())
ggplot(data=by_year_and_crime, aes(x=MonthAbb, y=count)) +
ggtitle("Number of offense insidents 2010 2106") +
xlab("Year  2010 2106") +
ylab("Number of incidents") +
geom_point(aes(color=Crimetype), size=5.0) +
geom_line(aes(color=Crimetype), size=2.0)
library(ggplot2)
by_year_and_crime = crimes %>%
group_by(year, Crimetype) %>% summarise(count=n())
ggplot(data=by_year_and_crime, aes(x=MonthAbb, y=count)) +
ggtitle("Number of offense insidents 2010 2106") +
xlab("Year  2010 2106") +
ylab("Number of incidents") +
geom_point(aes(color=Crimetype), size=5.0) +
geom_line(aes(color=Crimetype), size=2.0)
by_year_and_crime = crimes %>%
group_by(year, Crimetype) %>% summarise(count=n())
ggplot(data=by_year_and_crime, aes(x=year, y=count)) +
ggtitle("Number of offense insidents 2010 2106") +
xlab("Year  2010 2106") +
ylab("Number of incidents") +
geom_point(aes(color=Crimetype), size=5.0) +
geom_line(aes(color=Crimetype), size=2.0)
temp <- crimes %>% select(CrimeID,year)
names(crimes)
temp <- crimes %>% select(Crimetype,year)
temp <- temp %>% group_by(year) %>% summarise(n=n())
temp <- na.omit(temp)
p <- plot_ly(temp, x = year, y = n, name = "Number of crimes by Year")
library(ggplot2)
library(VIM)
library(mice)
library(vcd)
require(car)
library(tabplot)
library(PerformanceAnalytics)
library(MASS)
library(glmnet)
p <- plot_ly(temp, x = year, y = n, name = "Number of crimes by Year")
p <- plot_ly(temp, x = year, y = n, name = "Number of crimes by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(year))), x = year) %>%
layout(title = "Year and Crimes",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = year, y = n, text = "Peak", showarrow = T))
p <- plot_ly(temp, x = year, y = n, name = "Number of crimes by Year")
p <- plot_ly(temp, x = year, y = n, name = "Number of crimes by Year")
library(plotly)
p <- plot_ly(temp, x = year, y = n, name = "Number of crimes by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(year))), x = year) %>%
layout(title = "Year and Crimes",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = year, y = n, text = "Peak", showarrow = T))
rm(list = ls())
WIN <- FALSE
if (WIN) {setwd("~//R//Rossmann")} else{setwd("~/dataScience/projects/repo/crime/code/")}
path <- '../input/metropolitan_2010_2016.csv'
e=fread(path, header=T, sep=",", stringsAsFactors=F)
e$Context<-NULL #unnecessary duplicate to char_2
unique(e$`Crime type`)
unique(e$Month)
library(tidyr)
crimes <- subset(e,
select=c(Month, Longitude,Latitude,LSOAcode,LSOAname,Crimetype))
names(e) <- c( "CrimeID"  , "Month"  ,  "Reportedby"    ,  "Fallswithin" ,
"Longitude"   ,   "Latitude"     ,      "Location"    ,    "LSOAcode"     ,
"LSOAname"     ,        "Crimetype"   ,         "Lastoutcomecategory")
crimes <- subset(e,
select=c(Month, Longitude,Latitude,LSOAcode,LSOAname,Crimetype))
library(tidyr)
vars <- c("year", "month")
crimes <- separate(crimes, Month, into = vars, sep = "-")
unique(e$Month)
crimes<-crimes[-which(crimes$Month=="Month"), ]
unique(crimes$Month)
names(crimes)
unique(crimes$month)
crimes <- subset(e,
select=c(Month, Longitude,Latitude,LSOAcode,LSOAname,Crimetype))
unique(crimes$month)
View(crimes)
unique(crimes$Month)
crimes<-crimes[-which(crimes$Month=="Month"), ]
crimes<-crimes[-which(crimes$Month=="Month"), ]
crimes <- subset(e,
select=c(Month, Longitude,Latitude,LSOAcode,LSOAname,Crimetype))
crimes<-crimes[-which(crimes$Month=="Month"), ]
unique(crimes$Month)
vars <- c("year", "month")
crimes <- separate(crimes, Month, into = vars, sep = "-")
unique(crimes$Month)
unique(crimes$year)
showmap(crimes)
library(plotly)
names(crimes)
temp <- crimes %>% select(Crimetype,year)
temp <- temp %>% group_by(year) %>% summarise(n=n())
temp <- na.omit(temp)
p <- plot_ly(temp, x = year, y = n, name = "Number of crimes by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(year))), x = year) %>%
layout(title = "Year and Crimes",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = year, y = n, text = "Peak", showarrow = T))
temp <- crimes %>% select(Crimetype,year)
names(crimes)
temp <- crimes %>% select(Crimetype,year)
tail(crimes)
crimes <- na.omit(crimes)
tail(crimes)
temp <- crimes %>% select(Crimetype,year)
temp <- crimes %>% select(LSOAname,year)
by_year_and_crime = crimes %>%
group_by(year, Crimetype) %>% summarise(count=n())
ggplot(data=by_year_and_crime, aes(x=year, y=count)) +
ggtitle("Number of offense insidents 2010 2106") +
xlab("Year  2010 2106") +
ylab("Number of incidents") +
geom_point(aes(color=Crimetype), size=5.0) +
geom_line(aes(color=Crimetype), size=2.0)
temp <- crimes %>% select(Crimetype,year)
require(MASS)
temp <- crimes %>% select(Crimetype,year)
require(MASS)
require(dplyr)
library(plotly)
temp <- crimes %>% select(Crimetype,year)
temp <- crimes %>% c(Crimetype,year)
temp <- e %>% select(Crimetype,year)
select(Crimetype,year)
crimes %>% select(Crimetype,year)
rm(list = ls())
library(data.table)
library(dplyr)
library(Matrix)
library(ggplot2)
library(tidyr)   #separate
require(MASS)
library(plotly)
system('ls -lh ./../input/2016-07/' )
WIN <- FALSE
if (WIN) {setwd("~//R//Rossmann")} else{setwd("~/dataScience/projects/repo/crime/code/")}
#path <-'../input/2016-07/2016-07-metropolitan-street.csv'
#path <-'../input/2016-07/2016-07-bedfordshire-street.csv'
#path <-'../input/everything.csv'
path <- '../input/metropolitan_2010_2016.csv'
e=fread(path, header=T, sep=",", stringsAsFactors=F)
names(e) <- c( "CrimeID"  , "Month"  ,  "Reportedby"    ,  "Fallswithin" ,
"Longitude"   ,   "Latitude"     ,      "Location"    ,    "LSOAcode"     ,
"LSOAname"     ,        "Crimetype"   ,         "Lastoutcomecategory")
e$Context<-NULL #unnecessary duplicate to char_2
names(e) <- c( "CrimeID"  , "Month"  ,  "Reportedby"    ,  "Fallswithin" ,
"Longitude"   ,   "Latitude"     ,      "Location"    ,    "LSOAcode"     ,
"LSOAname"     ,        "Crimetype"   ,         "Lastoutcomecategory")
vars <- c("year", "month")
crimes <- separate(crimes, Month, into = vars, sep = "-")
vars <- c("year", "month")
e <- separate(e, Month, into = vars, sep = "-")
e<-e[-which(e$Month=="Month"), ]
rm(list = ls())
library(data.table)
library(dplyr)
library(Matrix)
library(ggplot2)
library(tidyr)   #separate
require(MASS)
library(plotly)
system('ls -lh ./../input/2016-07/' )
WIN <- FALSE
if (WIN) {setwd("~//R//Rossmann")} else{setwd("~/dataScience/projects/repo/crime/code/")}
#path <-'../input/2016-07/2016-07-metropolitan-street.csv'
#path <-'../input/2016-07/2016-07-bedfordshire-street.csv'
#path <-'../input/everything.csv'
path <- '../input/metropolitan_2010_2016.csv'
e=fread(path, header=T, sep=",", stringsAsFactors=F)
e$Context<-NULL #unnecessary duplicate to char_2
class(e)
a<-e[-which(e$Month=="Month"), ]
vars <- c("year", "month")
a <- separate(a, Month, into = vars, sep = "-")
t_2006_to_2015 = filter(a, year <= 2016)
unique(a$year)
t_2006_to_2015 = filter(a, as.intenger (year) <= 2016)
t_2010_to_2015 = filter(a, as.integer (year) <= 2016)
t_2010_to_2015 = filter(a, as.integer(year) < 2016)
crimes <- subset(e, Crimetype =='Violence and sexual offences' &&  Crimetype =='Drugs',
select=c(year, month,  Longitude,Latitude,LSOAcode,LSOAname,Crimetype))
names(t_2010_to_2015)
names(e)
names(e) <- c( "CrimeID"  , "Month"  ,  "Reportedby"    ,  "Fallswithin" ,
"Longitude"   ,   "Latitude"     ,      "Location"    ,    "LSOAcode"     ,
"LSOAname"     ,        "Crimetype"   ,         "Lastoutcomecategory")
unique(e$Month)
a<-e[-which(e$Month=="Month"), ]
vars <- c("year", "month")
a <- separate(a, Month, into = vars, sep = "-")
t_2010_to_2015 = filter(a, as.integer(year) < 2016)
names(t_2010_to_2015)
crimes <- subset(t_2010_to_2015, Crimetype =='Violence and sexual offences' &&  Crimetype =='Drugs',
select=c(year, month,  Longitude,Latitude,LSOAcode,LSOAname,Crimetype))
crimes <- subset(t_2010_to_2015, Crimetype =='Violence and sexual offences' ||  Crimetype =='Drugs',
select=c(year, month,  Longitude,Latitude,LSOAcode,LSOAname,Crimetype))
crimes <- subset(t_2010_to_2015,
select=c(year, month, Longitude,Latitude,LSOAcode,LSOAname,Crimetype))
tail(crimes)
crimes<-crimes[-which(df$Longitude==""), ]
crimes_t_2010_to_2015<-t_2010_to_2015[-which(t_2010_to_2015$Longitude==""), ]
tail(crimes_t_2010_to_2015)
crimes_t_2010_to_2015<-crimes_t_2010_to_2015[-which(crimes_t_2010_to_2015$Crime.ID==""), ]
crimes <- subset(t_2010_to_2015,
select=c(year, month, Longitude,Latitude,LSOAcode,LSOAname,Crimetype))
crimes_t_2010_to_2015<-t_2010_to_2015[-which(t_2010_to_2015$Longitude==""), ]
temp <- crimes_t_2010_to_2015 %>% select(Crimetype,year)
names(crimes_t_2010_to_2015)
temp <- crimes_t_2010_to_2015 %>% select(CrimeID,year)
