rm (list = ls())
library(ggplot2)
library(VIM)
library(mice)
library(vcd)
require(car)
library(tabplot)
library(PerformanceAnalytics)
library(MASS)
library(glmnet)
# ===============================================================================================
setwd("/Users/davidmonteagudo/kaggle/data/imdb/input/")
movies = read.csv("movie_metadata.csv")
# ===============================================================================================
# EDA
summary(movies)
sapply(movies, sd)
summary(movies)
hist(movies$num_critic_for_reviews)
aggr(movies, numbers=T, prop=F, sortVars=T, labels=names(movies))
rm(list = ls())
library(data.table)
library(digest)
library(FeatureHashing)
library(Matrix)
n_batch  <- 5
col_idx  <- c(1:2141)
col_bat  <- cut(col_idx, n_batch, labels = c(1:n_batch))
all_features <- vector("list", n_batch)
all_digests  <- vector("list", n_batch)
read <- function(select) fread("../input/train_categorical.csv",
colClasses = "character",
na.strings = "",
showProgress = F,
select = select)
for(i in seq_along(all_features)) {
print(i)
dt <- read(select = col_idx[col_bat == i])
all_features[[i]] <- names(dt)
all_digests[[i]]  <- lapply(dt, digest)
rm(dt)
}
for(i in seq_along(all_features)) {
print(i)
dt <- read(select = col_idx[col_bat == i])
all_features[[i]] <- names(dt)
all_digests[[i]]  <- lapply(dt, digest)
rm(dt)
}
setwd("/Users/davidmonteagudo/kaggle/data/bosch/input/")
n_batch  <- 5
col_idx  <- c(1:2141)
col_bat  <- cut(col_idx, n_batch, labels = c(1:n_batch))
all_features <- vector("list", n_batch)
all_digests  <- vector("list", n_batch)
read <- function(select) fread("../input/train_categorical.csv",
colClasses = "character",
na.strings = "",
showProgress = F,
select = select)
for(i in seq_along(all_features)) {
print(i)
dt <- read(select = col_idx[col_bat == i])
all_features[[i]] <- names(dt)
all_digests[[i]]  <- lapply(dt, digest)
rm(dt)
}
library(bigmemory)
feature_summary <- data.table(feature = unlist(all_features),
digest  = unlist(all_digests))
feature_summary$duplicate <- duplicated(feature_summary$digest)
sum(feature_summary$duplicate)
head(feature_summary, 30)
feature_summary <- data.table(feature = unlist(all_features),
digest  = unlist(all_digests))
feature_summary$duplicate <- duplicated(feature_summary$digest)
sum(feature_summary$duplicate)
head(feature_summary, 30)
not_dupes <- feature_summary$feature[!feature_summary$duplicate]
dt <- read(select = not_dupes)
X  <- hashed.model.matrix( ~ . -Id -1, data = dt)
dim(X)
sum(rowSums(X) != 0)
sum(colSums(X) != 0)
summary(colSums(X)[colSums(X) > 0])
library(ff)
setwd("/Users/davidmonteagudo/kaggle/data/bosch/input/")
source('~/.active-rstudio-document')
cat.ff <- read.csv.ffdf(file="../input/train_categorical.csv")
knitr::opts_chunk$set(echo = TRUE)
library(oce)
install.packages("oce")
knitr::opts_chunk$set(echo = TRUE)
library(oce)
par(mar=c(3, 3, 1, 1), mgp=c(2, 0.7, 0)) # tighten margins
t <- as.POSIXct("2013-12-1", tz="UTC") + seq(0, 28*24*3600, 3600)
f <- moonAngle(t=t, longitude=-63.6,
latitude=44.65)$illuminatedFraction
plot(t, f, type="l", xlab="Day of 2013", ylab="Moon fraction")
grid()
par(mar=c(3, 3, 1, 1), mgp=c(2, 0.7, 0)) # tighten margins
t <- as.POSIXct("2016-09-14", tz="UTC") + seq(0, 28*24*3600, 3600)
f <- moonAngle(t=t, longitude=-63.6,
latitude=44.65)$illuminatedFraction
plot(t, f, type="l", xlab="Day of 2013", ylab="Moon fraction")
grid()
full <- as.POSIXct("2013-12-17 05:29:00", tz="AST")
abline(v=full)
mtext("full", at=full, side=3)
times <- seq(as.POSIXct("2014-02-14", tz="UTC"), length.out=50, by="year")
library(oce)
fraction <- moonAngle(times, lon=-63, lat=43)$illuminatedFraction
full <- fraction > 0.99
plot(times, fraction, xlab="Year", ylab="Moon Illuminated Fraction",
col=ifelse(full, "red", "blue"), pch=16, cex=2)
times <- seq(as.POSIXct("2014-02-14", tz="UTC"), length.out=50, by="year")
library(oce)
fraction <- moonAngle(times, lon=-63, lat=43)$illuminatedFraction
full <- fraction > 0.99
plot(times, fraction, xlab="Year", ylab="Moon Illuminated Fraction",
col=ifelse(full, "red", "blue"), pch=16, cex=2)
full <- as.POSIXct("2013-12-17 05:29:00", tz="AST")
abline(v=full)
mtext("full", at=full, side=3)
knitr::opts_chunk$set(echo = TRUE)
library(oce)
par(mar=c(3, 3, 1, 1), mgp=c(2, 0.7, 0)) # tighten margins
t <- as.POSIXct("2016-09-14", tz="UTC") + seq(0, 28*24*3600, 3600)
f <- moonAngle(t=t, longitude=-63.6,
latitude=44.65)$illuminatedFraction
plot(t, f, type="l", xlab="Day of 2013", ylab="Moon fraction")
grid()
par(mar=c(3, 3, 1, 1), mgp=c(2, 0.7, 0)) # tighten margins
t <- as.POSIXct("2016-09-14", tz="UTC") + seq(0, 12*28*24*3600, 3600)
f <- moonAngle(t=t, longitude=-63.6,
latitude=44.65)$illuminatedFraction
plot(t, f, type="l", xlab="Day of 2013", ylab="Moon fraction")
grid()
par(mar=c(3, 3, 1, 1), mgp=c(2, 0.7, 0)) # tighten margins
t <- as.POSIXct("2015-01-01", tz="UTC") + seq(0, 12*28*24*3600, 3600)
f <- moonAngle(t=t, longitude=-63.6,
latitude=44.65)$illuminatedFraction
plot(t, f, type="l", xlab="Day of 2013", ylab="Moon fraction")
grid()
par(mar=c(3, 3, 1, 1), mgp=c(2, 0.7, 0)) # tighten margins
t <- as.POSIXct("2015-01-01", tz="UTC") + seq(0, 12*28*24*3600, 3600)
f <- moonAngle(t=t, longitude=-63.6,
latitude=44.65)$illuminatedFraction
plot(t, f, type="l", xlab="month of 2015", ylab="Moon fraction")
grid()
par(mar=c(3, 3, 1, 1), mgp=c(2, 0.7, 0)) # tighten margins
t <- as.POSIXct("2015-01-01", tz="UTC") + seq(0, 13*28*24*3600, 3600)
f <- moonAngle(t=t, longitude=-63.6,
latitude=44.65)$illuminatedFraction
plot(t, f, type="l", xlab="month of 2015", ylab="Moon fraction")
grid()
system("ls ../input")
getwd()
system("ls ~/dataScience/datasets/data/werewolf")
mydata <- read.csv(".~/dataScience/datasets/data/werewolf/crime.csv")
mydata <- read.csv("~/dataScience/datasets/data/werewolf/crime.csv")
system("ls -l  ~/dataScience/datasets/data/werewolf")
system("ls -lh  ~/dataScience/datasets/data/werewolf")
par(mar=c(3, 3, 1, 1), mgp=c(2, 0.7, 0)) # tighten margins
t <- as.POSIXct("2016-09-01", tz="UTC") + seq(0, 28*24*3600, 3600)
f <- moonAngle(t=t, longitude=-63.6,
latitude=44.65)$illuminatedFraction
plot(t, f, type="l", xlab="month of 2015", ylab="Moon fraction")
grid()
library(ggplot2) # Data visualization
library(readr) # CSV file I/O, e.g. the read_csv function
# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory
getwd()
system("ls -lh  ~/dataScience/datasets/data/werewolf")
# Any results you write to the current directory are saved as output.
mydata <- read.csv("~/dataScience/datasets/data/werewolf/crime.csv")
library(tidyr)
## Fetching the year and month for each record
mydata <- separate(mydata, col = Month, into = c("Year", "Month"), sep = "-")
## Tabular structure of the data
table(mydata$Year)
## Data Visualization of the crime count based on Year
ggplot(mydata, aes(Year)) + geom_bar()
## Tabular structure of the data
table(mydata$Month)
## Data Visualization of the crime count based on Year
ggplot(mydata, aes(Month)) + geom_bar()
View(mydata)
mydata <- separate(mydata, col = Month, into = c("Year", "Month"), sep = "-")
table(mydata$Year)
table(mydata$Month)
ggplot(mydata, aes(Month)) + geom_bar()
unique(mydata$Text_General_Code)
types<-unique(mydata$Text_General_Code)
str(types)
setwd("~/dataScience/datasets/data/werewolf/)
setwd("~/dataScience/datasets/data/werewolf/)
setwd("~/dataScience/datasets/data/werewolf/")
# since the csv has around 1.1 million lines, we use ffdf for fast loading
t = read.csv.ffdf(file="crime.csv", header=TRUE,
VERBOSE=TRUE, first.rows=10000, next.rows=50000, colClasses=NA)
library(ff)
library(dplyr)
t = read.csv.ffdf(file="crime.csv", header=TRUE,
VERBOSE=TRUE, first.rows=10000, next.rows=50000, colClasses=NA)
# convert ffdf type to data.frame for later conversion
t = as.data.frame(t)
View(t)
str(t)
install.packages("swirl")
library("swirl")
rm(list=ls())
swirl()
x
x[1:9]
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[x(0)]
x[0]
x[3000]
x[c(-2, -10)]
x[c(-2, 10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect[1]
vect
names(vect)
vect2<-c(11, 2, NA)
names(vect2) <- c("foo" , "bar" , "norf")
identical(vect , vect2)
vect["bar"]
vect[c("foo", "bar")]
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
sapply(flag_shapes,range)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(shape_mat,unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals,lenght)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
install_course("Exploratory_Data_Analysis")
swirl()
exit
bye
bye()
swirl()
