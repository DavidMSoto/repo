rm (list = ls())
library(ggplot2)
library(VIM)
library(mice)
library(vcd)
require(car)
library(tabplot)
library(PerformanceAnalytics)
library(MASS)
library(glmnet)
# ===============================================================================================
setwd("/Users/davidmonteagudo/kaggle/data/imdb/input/")
movies = read.csv("movie_metadata.csv")
# ===============================================================================================
# EDA
summary(movies)
sapply(movies, sd)
summary(movies)
hist(movies$num_critic_for_reviews)
aggr(movies, numbers=T, prop=F, sortVars=T, labels=names(movies))
rm(list = ls())
library(data.table)
library(digest)
library(FeatureHashing)
library(Matrix)
n_batch  <- 5
col_idx  <- c(1:2141)
col_bat  <- cut(col_idx, n_batch, labels = c(1:n_batch))
all_features <- vector("list", n_batch)
all_digests  <- vector("list", n_batch)
read <- function(select) fread("../input/train_categorical.csv",
colClasses = "character",
na.strings = "",
showProgress = F,
select = select)
for(i in seq_along(all_features)) {
print(i)
dt <- read(select = col_idx[col_bat == i])
all_features[[i]] <- names(dt)
all_digests[[i]]  <- lapply(dt, digest)
rm(dt)
}
for(i in seq_along(all_features)) {
print(i)
dt <- read(select = col_idx[col_bat == i])
all_features[[i]] <- names(dt)
all_digests[[i]]  <- lapply(dt, digest)
rm(dt)
}
setwd("/Users/davidmonteagudo/kaggle/data/bosch/input/")
n_batch  <- 5
col_idx  <- c(1:2141)
col_bat  <- cut(col_idx, n_batch, labels = c(1:n_batch))
all_features <- vector("list", n_batch)
all_digests  <- vector("list", n_batch)
read <- function(select) fread("../input/train_categorical.csv",
colClasses = "character",
na.strings = "",
showProgress = F,
select = select)
for(i in seq_along(all_features)) {
print(i)
dt <- read(select = col_idx[col_bat == i])
all_features[[i]] <- names(dt)
all_digests[[i]]  <- lapply(dt, digest)
rm(dt)
}
library(bigmemory)
feature_summary <- data.table(feature = unlist(all_features),
digest  = unlist(all_digests))
feature_summary$duplicate <- duplicated(feature_summary$digest)
sum(feature_summary$duplicate)
head(feature_summary, 30)
feature_summary <- data.table(feature = unlist(all_features),
digest  = unlist(all_digests))
feature_summary$duplicate <- duplicated(feature_summary$digest)
sum(feature_summary$duplicate)
head(feature_summary, 30)
not_dupes <- feature_summary$feature[!feature_summary$duplicate]
dt <- read(select = not_dupes)
X  <- hashed.model.matrix( ~ . -Id -1, data = dt)
dim(X)
sum(rowSums(X) != 0)
sum(colSums(X) != 0)
summary(colSums(X)[colSums(X) > 0])
library(ff)
setwd("/Users/davidmonteagudo/kaggle/data/bosch/input/")
source('~/.active-rstudio-document')
cat.ff <- read.csv.ffdf(file="../input/train_categorical.csv")
rm(list = ls())
library(data.table)
library(Matrix)
library(ggplot2)
library(tidyr)   #separate
require(MASS)
library(plotly)
library(dplyr)
system('ls -lh ./../input/2016-07/' )
WIN <- FALSE
if (WIN) {setwd("~//R//Rossmann")} else{setwd("~/dataScience/projects/repo/crime/code/")}
#path <-'../input/2016-07/2016-07-metropolitan-street.csv'
#path <-'../input/2016-07/2016-07-bedfordshire-street.csv'
#path <-'../input/everything.csv'
path <- '../input/metropolitan_2010_2016.csv'
e=fread(path, header=T, sep=",", stringsAsFactors=F)
e$Context<-NULL #unnecessary duplicate to char_2
rm(list = ls())
library(data.table)
library(Matrix)
library(ggplot2)
library(tidyr)   #separate
require(MASS)
library(plotly)
library(dplyr)
system('ls -lh ./../input/2016-07/' )
WIN <- FALSE
if (WIN) {setwd("~//R//Rossmann")} else{setwd("~/dataScience/projects/repo/crime/code/")}
#path <-'../input/2016-07/2016-07-metropolitan-street.csv'
#path <-'../input/2016-07/2016-07-bedfordshire-street.csv'
#path <-'../input/everything.csv'
path <- '../input/metropolitan_2010_2016.csv'
e=fread(path, header=T, sep=",", stringsAsFactors=F)
e$Context<-NULL #unnecessary duplicate to char_2
names(e) <- c( "CrimeID"  , "Month"  ,  "Reportedby"    ,  "Fallswithin" ,
"Longitude"   ,   "Latitude"     ,      "Location"    ,    "LSOAcode"     ,
"LSOAname"     ,        "Crimetype"   ,         "Lastoutcomecategory")
#why na omit doesnÂ´t work ??
unique(e$Month)
e<-e[-which(e$Month=="Month"), ]
vars <- c("year", "month")
e <- separate(e, Month, into = vars, sep = "-")
t_2010_to_2015 = filter(e, as.integer(year) < 2016)
rm(e)
names(t_2010_to_2015)
temp <- t_2010_to_2015 %>% select(Crimetype,year)
temp <- temp %>% group_by(year) %>% summarise(n=n())
temp <- na.omit(temp)
View(temp)
p <- plot_ly(temp, x = year, y = n, name = "Number of crimes by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(year))), x = year) %>%
layout(title = "Year and Crimes",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = year, y = n, text = "Peak", showarrow = T))
temp <- t_2010_to_2015 %>% select(Crimetype,year)
temp <- temp %>% group_by(year,Crimetype) %>% summarise(n=n())
View(temp)
p <- plot_ly(temp, x = year, y = n, name = "Number of crimes by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(year))), x = year) %>%
layout(title = "Year and Crimes",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = year, y = n, text = "Peak", showarrow = T))
View(temp)
p <- plot_ly(temp, x = year, y = Crimetype, name = "Number of crimes by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(year))), x = year) %>%
layout(title = "Year and Crimes",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = year, y = n, text = "Peak", showarrow = T))
temp <- temp %>% group_by(year,Crimetype) %>% summarise(n=n())
View(temp)
temp <- t_2010_to_2015 %>% select(Crimetype,year)
temp <- temp %>% group_by(year,Crimetype) %>% summarise(n=n())
View(temp)
View(temp)
p <- plot_ly(temp, x = year, y = n, name = "Number of crimes by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(year))), x = year) %>%
layout(title = "Year and Crimes",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = year, y = n, text = "Peak", showarrow = T))
rm(list = ls())
library(dplyr)
library(ggplot2)
library(plotly)
library(data.table)
library(formattable)
setwd("~/dataScience/projects/repo/imdb/input/")
movie <- read.csv('movie_metadata.csv',header=T,stringsAsFactors = F)
str(movie)
dim(movie)
View(movie)
temp <- movie %>% select(movie_title,title_year)
temp <- temp %>% group_by(title_year) %>% summarise(n=n())
temp <- na.omit(temp)
p <- plot_ly(temp, x = title_year, y = n, name = "Number of Movies by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(title_year))), x = title_year) %>%
layout(title = "Year and Movies",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = title_year, y = n, text = "Peak", showarrow = T))
temp <- movie %>% select(imdb_score,title_year)
temp <- temp %>% group_by(title_year)%>% summarise(score=mean(imdb_score))
temp <- na.omit(temp)
p <- plot_ly(temp, x = title_year, y = score, name = "Avg Score by Year")
p %>%
add_trace(y = fitted(loess(score ~ as.numeric(title_year))), x = title_year) %>%
layout(title = "Year and Score",
showlegend = FALSE) %>%
dplyr::filter(score == max(score)) %>%
layout(annotations = list(x = title_year, y = score, text = "Peak", showarrow = T))
temp <- movie %>% select(content_rating,imdb_score)
temp <- temp %>% group_by(content_rating)%>% summarise(score = mean(imdb_score))
p <- plot_ly(
x = temp$content_rating,
y = temp$score,
name = "Avg score by Rating",
type = "bar")
p
temp <- movie %>% select(imdb_score,content_rating)
temp <- na.omit(temp)
plot_ly(temp, x = imdb_score, color = content_rating, type = "box")
temp <- movie %>% select(imdb_score,content_rating)
temp <- na.omit(temp)
plot_ly(temp, x = imdb_score, color = content_rating, type = "box")
temp <- movie %>% select(director_name,imdb_score)
temp <- temp %>% group_by(director_name) %>% summarise(avg=mean(imdb_score))
temp <- temp %>% arrange(desc(avg))
temp <- temp[1:20,]
temp %>%
formattable(list(avg = color_bar("orange")), align = 'l')
temp <- movie %>% select(cast_total_facebook_likes,budget,movie_title,content_rating)
plot_ly(temp, x = cast_total_facebook_likes, y = budget,
color =content_rating , mode = "markers",text=paste('Movie:',movie_title))
qnt <- quantile(temp$budget, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(temp$budget, na.rm =T)
temp$budget <- ifelse(temp$budget<(qnt[1]-H),NA,temp$budget)
temp$budget <- ifelse(temp$budget>(qnt[2]+H),NA,temp$budget)
temp <- na.omit(temp)
plot_ly(temp, x = cast_total_facebook_likes, y = budget,
color =content_rating , mode = "markers",text=paste('Movie:',movie_title))
temp <- movie %>% select(director_facebook_likes,imdb_score,content_rating,movie_title)
plot_ly(temp, x = director_facebook_likes, y = imdb_score,
color =content_rating , mode = "markers",text=paste('Movie:',movie_title))
temp <- movie %>% select(gross, budget,title_year)
temp$diff <- temp$gross - temp$budget
temp <- na.omit(temp)
temp$profit <- rep('',dim(temp)[1])
temp$profit <- ifelse(temp$diff<0,'No','Yes')
temp <- temp %>% group_by(title_year) %>% summarise(n=sum(profit=='No'))
p <- plot_ly(temp, x = title_year, y = n, name = "Number of low grossing movies by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(title_year))), x = title_year) %>%
layout(title = "Year and Low Gross",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = title_year, y = n, text = "Peak", showarrow = T))
