library(ggplot2)
library(VIM)
library(mice)
library(vcd)
require(car)
library(tabplot)
library(PerformanceAnalytics)
library(MASS)
library(glmnet)
setwd("~/movie")
movies = read.csv("movie_metadata.csv")
setwd("/Users/davidmonteagudo/kaggle/data/imdb/input/")
movies = read.csv("movie_metadata.csv")
sapply(movies, sd)
hist(movies$num_critic_for_reviews)
length(complete.cases(movies))
aggr(movies, numbers=T, prop=F, sortVars=T, labels=names(movies)) # change 'prop' to T to see ratio
install.packages("PerformanceAnalytics")
install.packages("tabplot")
library(glmnet)
install.packages("glmnet")
library(ggplot2)
library(VIM)
library(mice)
library(vcd)
require(car)
library(tabplot)
library(PerformanceAnalytics)
library(MASS)
library(glmnet)
?`bit-package`
aggr(movies, numbers=T, prop=F, sortVars=T, labels=names(movies)) # change 'prop' to T to see ratio
matrixplot(movies, interactive=T, sortby="imdb_score")
library(ggplot2)
library(VIM)
install.packages("VIM")
?VIM
??VIM
library(mice)
library(vcd)
require(car)
library(tabplot)
library(PerformanceAnalytics)
library(glmnet)
library(MASS)
length(complete.cases(movies))
aggr(movies, numbers=T, prop=F, sortVars=T, labels=names(movies)) # change 'prop' to T to see ratio
matrixplot(movies, interactive=T, sortby="imdb_score")
movies = read.csv("movie_metadata.csv")
summary(movies)
sapply(movies, sd)
hist(movies$num_critic_for_reviews)
length(complete.cases(movies))
aggr(movies, numbers=T, prop=F, sortVars=T, labels=names(movies)) # change 'prop' to T to see ratio
aggregate(movies, numbers=T, prop=F, sortVars=T, labels=names(movies)) # change 'prop' to T to see ratio
ls("mice:ts")
ls("car:ts")
lsf.str("glmnet:ts")
matrixplot(movies, interactive=T, sortby="imdb_score")
matrixplot(movies, interactive=T, sortby="imdb_score")
library(ggplot2)
library(VIM)
library(mice)
library(vcd)
require(car)
library(tabplot)
library(PerformanceAnalytics)
library(MASS)
library(glmnet)
aggr(movies, numbers=T, prop=F, sortVars=T, labels=names(movies))
aggr(movies, numbers=T, prop=F, sortVars=T, labels=names(movies))
matrixplot(movies, interactive=T, sortby="imdb_score")
marginplot(movies[,c("gross", "imdb_score")])
md.pattern(movies) # hard to interpret due to too many variables
scattmatrixMiss(movies[, 1:5], interactive = F)
hist(movies$imdb_score, breaks=30)
plot(density(movies$imdb_score))
abline(v=mean(movies$imdb_score), lty=2)
hist(movies$title_year)
boxplot(imdb_score ~ title_year, data=movies, col="bisque", las=2)
title("IMDB score vs movie year")
reordered_country = with(movies, reorder(country, -imdb_score, median))
boxplot(imdb_score ~ reordered_country, data=movies, lwd=0.5, col="bisque", las=2)
title("IMDB score vs country")
reordered_language = with(movies, reorder(language, -imdb_score, median))
boxplot(imdb_score ~ reordered_language, data=movies, lwd=0.5, col="bisque", las=2)
title("IMDB score vs language")
boxplot(imdb_score ~ color, data=movies, lwd=0.5, col="bisque", las=2)
stripchart(imdb_score ~ color, data=movies, vertical=T, add=T, pch=1, col='grey')
title("IMDB score vs color")
reordered_content_rating = with(movies, reorder(content_rating, -imdb_score, median))
boxplot(imdb_score ~ reordered_content_rating, data=movies, lwd=0.5, col="bisque", las=2)
stripchart(imdb_score ~ reordered_content_rating, data=movies, vertical=T, add=T, pch=1, col='grey')
title("IMDB score vs content rating")
library(googleVis)
library(dplyr)
m1 = movies %>% select(actor_1_name, actor_1_facebook_likes) %>%
group_by(actor_1_name) %>% summarize(appear.count=n())
m2 = left_join(movies, m1, by="actor_1_name")
m3 = m2 %>% select(actor_1_name, actor_1_facebook_likes, appear.count) %>%
distinct %>% arrange(desc(appear.count))
hist(m3$appear.count, breaks=30)
Bubble <- gvisBubbleChart(m3, idvar="actor_1_name",
xvar="appear.count", yvar="actor_1_facebook_likes",
sizevar="appear.count",
#colorvar="title_year",
options=list(
#hAxis='{minValue:75, maxValue:125}',
width=1000, height=800
)
)
plot(Bubble)
install.packages("googleVis")
library(googleVis)
library(dplyr)
m1 = movies %>% select(actor_1_name, actor_1_facebook_likes) %>%
group_by(actor_1_name) %>% summarize(appear.count=n())
m2 = left_join(movies, m1, by="actor_1_name")
m3 = m2 %>% select(actor_1_name, actor_1_facebook_likes, appear.count) %>%
distinct %>% arrange(desc(appear.count))
hist(m3$appear.count, breaks=30)
Bubble <- gvisBubbleChart(m3, idvar="actor_1_name",
xvar="appear.count", yvar="actor_1_facebook_likes",
sizevar="appear.count",
#colorvar="title_year",
options=list(
#hAxis='{minValue:75, maxValue:125}',
width=1000, height=800
)
)
plot(Bubble)
ms_all_rows = movies[, c("imdb_score",
"director_facebook_likes",
"cast_total_facebook_likes",
#"actor_1_facebook_likes",
#"actor_2_facebook_likes",
#"actor_3_facebook_likes",
#"movie_facebook_likes",
"facenumber_in_poster",
"gross",
"budget")]
ms = na.omit(ms_all_rows)
cor(ms)
plot(ms, pch='.')
chart.Correlation(ms)
# very informative! It shows that cast_total_facebook_likes has high correlation with actor_1_facebook_likes
msc = movies[, c("color",
"duration",
"content_rating",
"language",
"country",
"aspect_ratio",
"title_year",
"imdb_score"
)]
scatterplotMatrix(ms, pch=".")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(plotly)
library(data.table)
library(formattable)
setwd("/Users/davidmonteagudo/kaggle/data/imdb/input/")
movie <- read.csv('../input/movie_metadata.csv',header=T,stringsAsFactors = F)
str(movie)
dim(movie)
movie_year <- movie %>% select(movie_title,title_year)
group_movie_year <- movie_year %>% group_by(title_year) %>% summarise(n=n())
y <- c(1,2,3,NA)
length(which(is.na(y))) # returns a vector (F F F T)
which(is.na(group_movie_year$title_year))
group_movie_year <- na.omit(group_movie_year)
p <- plot_ly(group_movie_year, x = title_year, y = n, name = "Number of Movies by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(title_year))), x = title_year) %>%
layout(title = "Year and Movies",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = title_year, y = n, text = "Peak", showarrow = T))
temp <- movie %>% select(imdb_score,title_year)
temp <- temp %>% group_by(title_year)%>% summarise(score=mean(imdb_score))
temp <- na.omit(temp)
p <- plot_ly(temp, x = title_year, y = score, name = "Avg Score by Year")
p %>%
add_trace(y = fitted(loess(score ~ as.numeric(title_year))), x = title_year) %>%
layout(title = "Year and Score",
showlegend = FALSE) %>%
dplyr::filter(score == max(score)) %>%
layout(annotations = list(x = title_year, y = score, text = "Peak", showarrow = T))
movie_year <- movie %>% select(movie_title,title_year)
group_movie_year <- movie_year %>% group_by(title_year) %>% summarise(n=n())
y <- c(1,2,3,NA)
length(which(is.na(y))) # returns a vector (F F F T)
which(is.na(group_movie_year$title_year))
group_movie_year <- na.omit(group_movie_year)
p <- plot_ly(group_movie_year, x = title_year, y = n, name = "Number of Movies by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(title_year))), x = title_year) %>%
layout(title = "Year and Movies",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = title_year, y = n, text = "Peak", showarrow = T))
movie_year <- movie %>% select(movie_title,title_year)
group_movie_year <- movie_year %>% group_by(title_year) %>% summarise(n=n())
y <- c(1,2,3,NA)
length(which(is.na(y))) # returns a vector (F F F T)
which(is.na(group_movie_year$title_year))
group_movie_year <- na.omit(group_movie_year)
p <- plot_ly(group_movie_year, x = title_year, y = n, name = "Number of Movies by Year")
p %>%
add_trace(y = fitted(loess(n ~ as.numeric(title_year))), x = title_year) %>%
layout(title = "Year and Movies",
showlegend = FALSE) %>%
dplyr::filter(n == max(n)) %>%
layout(annotations = list(x = title_year, y = n, text = "Peak", showarrow = T))
ls()
list = ls()
rm (ls())
rm (list = ls())
setwd("/Users/davidmonteagudo/kaggle/data/imdb/input/")
movies = read.csv("movie_metadata.csv")
summary(movies)
sapply(movies, sd)
hist(movies$num_critic_for_reviews)
length(complete.cases(movies))
dim(movies)
names(movies)
aggr(movies, numbers=T, prop=F, sortVars=T, names(movies))
aggr(movies, numbers=T, prop=F, sortVars=T, labels=names(movies))
View(movies)
aggr(train, numbers=T, prop=F, sortVars=T, labels=names(train))
# Load packages
rm(list = ls())
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
train <- read.csv('../input/train.csv', stringsAsFactors = F)
test  <- read.csv('../input/test.csv', stringsAsFactors = F)
tab <- read.csv('../input/tableau.csv', stringsAsFactors = F)
str(tab)
full  <- bind_rows(train, test) # bind training & test data
aggr(train, numbers=T, prop=F, sortVars=T, labels=names(train))
# check data
str(full)
summary(tab)
# Load packages
rm(list = ls())
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
setwd("/Users/davidmonteagudo/kaggle/data/titanic/input/")
train <- read.csv('../input/train.csv', stringsAsFactors = F)
test  <- read.csv('../input/test.csv', stringsAsFactors = F)
tab <- read.csv('../input/tableau.csv', stringsAsFactors = F)
str(tab)
full  <- bind_rows(train, test) # bind training & test data
aggr(train, numbers=T, prop=F, sortVars=T, labels=names(train))
# check data
str(full)
summary(tab)
